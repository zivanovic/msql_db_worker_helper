/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import gui.draw.DCConector;
import gui.draw.DrawingPan;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import log.Log;
import logic.connection.mysql.MySqlConnection;
import logic.draw.DBShema;
import logic.draw.DBTable;

/**
 *
 * @author Zoran Zivanovic <zoran86zz at yahoo.com>
 */
public class MainGui extends javax.swing.JFrame
{

    /**
     * Creates new form MainGui
     */
    public MainGui()
    {
        initComponents();
        setLocation(get_center(getWidth(), getHeight(), true));
        clear_tree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jpm_tree_menue = new javax.swing.JPopupMenu();
        jmi_select = new javax.swing.JMenuItem();
        jmi_delete_selected_table = new javax.swing.JMenuItem();
        jmi_new_table = new javax.swing.JMenuItem();
        jmi_new_shema = new javax.swing.JMenuItem();
        jsp_split_panel = new javax.swing.JSplitPane();
        jp_holder = new javax.swing.JPanel();
        jp_tree_holder = new javax.swing.JPanel();
        jsp_tree_holder = new javax.swing.JScrollPane();
        jt_database_table_list = new javax.swing.JTree();
        jmb_menu = new javax.swing.JMenuBar();
        jm_File = new javax.swing.JMenu();
        jmi_otvori_konekciju = new javax.swing.JMenuItem();
        jmi_close_conection = new javax.swing.JMenuItem();
        jmi_dizajn = new javax.swing.JMenuItem();
        jm_edit = new javax.swing.JMenu();
        jm_draw = new javax.swing.JMenu();
        jmi_shema = new javax.swing.JMenuItem();
        jmi_teble = new javax.swing.JMenuItem();
        jmi_connection = new javax.swing.JMenuItem();

        jpm_tree_menue.setEnabled(false);

        jmi_select.setText("select");
        jmi_select.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jmi_selectActionPerformed(evt);
            }
        });
        jpm_tree_menue.add(jmi_select);

        jmi_delete_selected_table.setText("delete table");
        jmi_delete_selected_table.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jmi_delete_selected_tableActionPerformed(evt);
            }
        });
        jpm_tree_menue.add(jmi_delete_selected_table);

        jmi_new_table.setText("new table");
        jmi_new_table.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jmi_new_tableActionPerformed(evt);
            }
        });
        jpm_tree_menue.add(jmi_new_table);

        jmi_new_shema.setText("new Shema");
        jmi_new_shema.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jmi_new_shemaActionPerformed(evt);
            }
        });
        jpm_tree_menue.add(jmi_new_shema);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple MySql manipulator");

        jsp_split_panel.setDividerLocation(120);

        jp_holder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jp_holder.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jp_holderLayout = new javax.swing.GroupLayout(jp_holder);
        jp_holder.setLayout(jp_holderLayout);
        jp_holderLayout.setHorizontalGroup(
            jp_holderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 648, Short.MAX_VALUE)
        );
        jp_holderLayout.setVerticalGroup(
            jp_holderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
        );

        jsp_split_panel.setRightComponent(jp_holder);

        jp_tree_holder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jsp_tree_holder.setBorder(null);

        jt_database_table_list.setBackground(new java.awt.Color(240, 240, 240));
        jsp_tree_holder.setViewportView(jt_database_table_list);

        javax.swing.GroupLayout jp_tree_holderLayout = new javax.swing.GroupLayout(jp_tree_holder);
        jp_tree_holder.setLayout(jp_tree_holderLayout);
        jp_tree_holderLayout.setHorizontalGroup(
            jp_tree_holderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_tree_holderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jsp_tree_holder, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                .addContainerGap())
        );
        jp_tree_holderLayout.setVerticalGroup(
            jp_tree_holderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_tree_holderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jsp_tree_holder, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addContainerGap())
        );

        jsp_split_panel.setLeftComponent(jp_tree_holder);

        jm_File.setText("File");

        jmi_otvori_konekciju.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jmi_otvori_konekciju.setText("Otvori konekciju");
        jmi_otvori_konekciju.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jmi_otvori_konekcijuActionPerformed(evt);
            }
        });
        jm_File.add(jmi_otvori_konekciju);

        jmi_close_conection.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jmi_close_conection.setText("Zatvori konekciju");
        jmi_close_conection.setEnabled(false);
        jmi_close_conection.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jmi_close_conectionActionPerformed(evt);
            }
        });
        jm_File.add(jmi_close_conection);

        jmi_dizajn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jmi_dizajn.setText("Dizajn");
        jmi_dizajn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jmi_dizajnActionPerformed(evt);
            }
        });
        jm_File.add(jmi_dizajn);

        jmb_menu.add(jm_File);

        jm_edit.setText("Edit");
        jmb_menu.add(jm_edit);

        jm_draw.setText("Draw");

        jmi_shema.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        jmi_shema.setText("Shema");
        jm_draw.add(jmi_shema);

        jmi_teble.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        jmi_teble.setText("Table");
        jm_draw.add(jmi_teble);

        jmi_connection.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jmi_connection.setText("Connection");
        jmi_connection.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jmi_connectionActionPerformed(evt);
            }
        });
        jm_draw.add(jmi_connection);

        jmb_menu.add(jm_draw);

        setJMenuBar(jmb_menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jsp_split_panel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jsp_split_panel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Point get_center(int w, int h, boolean frame)
    {
        Point point = null;
        double width;
        double height;
        if (frame)
        {
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            width = screenSize.getWidth();
            height = screenSize.getHeight();
        } else
        {
            width = this.getWidth();
            height = this.getHeight();
        }

        int with_r = (int) (width / 2 - w / 2);
        int height_r = (int) (height / 2 - h / 2);
        if (!frame)
        {
            with_r = (int) (with_r + getLocation().getX());
            height_r = (int) (height_r + getLocation().getY());
        }
        point = new Point(with_r, height_r);
        return point;
    }
    private void jmi_otvori_konekcijuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmi_otvori_konekcijuActionPerformed
    {//GEN-HEADEREND:event_jmi_otvori_konekcijuActionPerformed
        OpenConnection jdialog = new OpenConnection();
        Point position = get_center(jdialog.getWidth(), jdialog.getHeight(), false);
        jdialog.setLocation(position);
        jdialog.setVisible(true);

        if (jdialog.isconnect())
        {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));


            mysql_connection = jdialog.getMysql_connection();
            sql_exe = new SqlExecution();
            sql_exe.setConnection(mysql_connection);
            jp_holder.setLayout(new java.awt.BorderLayout());
            jp_holder.add(sql_exe, BorderLayout.CENTER);
            jp_holder.revalidate();
            jmi_otvori_konekciju.setEnabled(false);
            jmi_close_conection.setEnabled(true);

            set_data_tree();
            jpm_tree_menue.setEnabled(true);
            setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_jmi_otvori_konekcijuActionPerformed

    private void jmi_close_conectionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmi_close_conectionActionPerformed
    {//GEN-HEADEREND:event_jmi_close_conectionActionPerformed

        Object[] options =
        {
            "Da",
            "Ne"
        };
        int n = JOptionPane.showOptionDialog(this,
                "Da li ste sigurni da zelite da ugasite konekciju?",
                "Potvrda",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);

        if (mysql_connection != null && n == 0)
        {
            mysql_connection.disconnect();
            jmi_otvori_konekciju.setEnabled(true);
            jmi_close_conection.setEnabled(false);
            jp_holder.removeAll();
            jp_holder.revalidate();
            clear_tree();
            this.revalidate();
            this.repaint();
            mysql_connection = null;

        }

    }//GEN-LAST:event_jmi_close_conectionActionPerformed

    private void jmi_dizajnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmi_dizajnActionPerformed
    {//GEN-HEADEREND:event_jmi_dizajnActionPerformed
        clear_tree();
        jp_holder.removeAll();
        dpan = new DrawingPan(root, jp_tree_holder);

        jp_holder.setLayout(new java.awt.BorderLayout());
        jp_holder.add(dpan, BorderLayout.CENTER);
        jp_holder.revalidate();

    }//GEN-LAST:event_jmi_dizajnActionPerformed

    private void jmi_selectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmi_selectActionPerformed
    {//GEN-HEADEREND:event_jmi_selectActionPerformed
        TreePath tp = jt_database_table_list.getSelectionPath();
        String q = "select * from ";
        if (tp.getPathCount() == 3)
        {
            for (int i = 1; i < 3; i++)
            {
                if (i == 1)
                {
                    q += tp.getPathComponent(i).toString() + ".";
                } else
                {
                    q += tp.getPathComponent(i).toString();
                }
            }

        } else
        {
            for (int i = 0; i < 2; i++)
            {
                if (i == 0)
                {
                    q += tp.getPathComponent(i).toString() + ".";
                } else
                {
                    q += tp.getPathComponent(i).toString();
                }
            }
        }
        if (sql_exe != null)
        {
            sql_exe.set_query_and_exec(q);
        }

    }//GEN-LAST:event_jmi_selectActionPerformed

    private void jmi_connectionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmi_connectionActionPerformed
    {//GEN-HEADEREND:event_jmi_connectionActionPerformed
        dpan.addConectionComponent(new DCConector());
        //setCursor(Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR));
    }//GEN-LAST:event_jmi_connectionActionPerformed

    private void jmi_new_tableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmi_new_tableActionPerformed
    {//GEN-HEADEREND:event_jmi_new_tableActionPerformed
        NewTableDialog ntd = new NewTableDialog(this, true);
        ntd.setLocation(get_center(ntd.getWidth(), ntd.getHeight(), false));
        ntd.setVisible(true);
        if (ntd.isOk())
        {
            DBTable dbt = ntd.getTable();
            String q = dbt.createSQL();

            sql_exe.set_query_and_exec(q);
            set_data_tree();
        }
        ntd.dispose();

    }//GEN-LAST:event_jmi_new_tableActionPerformed

    private void jmi_delete_selected_tableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmi_delete_selected_tableActionPerformed
    {//GEN-HEADEREND:event_jmi_delete_selected_tableActionPerformed
        // TODO add your handling code here:

        TreePath selecktovana_putanja = jt_database_table_list.getSelectionPath();
        Log.logd(selecktovana_putanja.getPath()[0].getClass().getName());
        int velicina = selecktovana_putanja.getPathCount();
        DefaultMutableTreeNode dtn = (DefaultMutableTreeNode) selecktovana_putanja.getPathComponent(velicina - 1);
        Log.logd(dtn.toString());
        if (dtn.getUserObject().getClass().getName().equals(DBTable.class.getName()))
        {
            //delete table
            DefaultMutableTreeNode dtn_shem = (DefaultMutableTreeNode) selecktovana_putanja.getPathComponent(velicina - 2);
            DBShema dbs = (DBShema) dtn_shem.getUserObject();
            DBTable dbt = (DBTable) dtn.getUserObject();
            Object[] options =
            {
                "Da",
                "Ne"
            };
            int n = JOptionPane.showOptionDialog(this,
                    "Da li ste sigurni da zelite da obrisete tabelu " + dbt.getName() + "?",
                    "Potvrda",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[1]);
            
            if(n==0)
            {
                sql_exe.set_query_and_exec("DROP TABLE "+dbs.getName()+"."+dbt.getName());
                set_data_tree();
            }

        } else if (dtn.getUserObject().getClass().getName().equals(DBShema.class.getName()))
        {
            //delete shema
        }



//        for(DefaultMutableTreeNode s:val)
//        {
//            Log.logd(s.toString());
//        }


    }//GEN-LAST:event_jmi_delete_selected_tableActionPerformed

    private void jmi_new_shemaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jmi_new_shemaActionPerformed
    {//GEN-HEADEREND:event_jmi_new_shemaActionPerformed
        NewShema ns = new NewShema(this, false);
        ns.setLocation(get_center(ns.getWidth(),ns.getHeight(), false));
        ns.setVisible(true);
        
    }//GEN-LAST:event_jmi_new_shemaActionPerformed

    private void clear_tree()
    {
        root = new DefaultMutableTreeNode("root");
        DefaultTreeModel treeModel = new DefaultTreeModel(root);

        jt_database_table_list.setModel(treeModel);
        jt_database_table_list.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jt_database_table_list.revalidate();
        jt_database_table_list.getParent().repaint();
        jt_database_table_list.setComponentPopupMenu(jpm_tree_menue);

    }

    private void set_data_tree()
    {
        /* jt_database_table_list.setCellRenderer(new DefaultTreeCellRenderer() {

         @Override
         public Component getTreeCellRendererComponent(JTree tree, Object value, 
         boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus)
         {
         Component ret = super.getTreeCellRendererComponent(tree, value,
         selected, expanded, leaf, row, hasFocus);

         JLabel label = (JLabel) ret ;
         if(tree.is)
         label.setIcon( root_img ) ;
         label.setBackground(label.getBackground());
         return ret;
         }
         });
         * */
        // DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
        // renderer.setLeafIcon(leaf_img);
        //  jt_database_table_list.setCellRenderer(renderer);


        boolean databas = false;
        boolean tables = false;
        boolean columns = false;
        Vector<String> vshame = new Vector();
        Vector<DefaultMutableTreeNode> tnvshame = new Vector();

        //select database tree
        if (mysql_connection.getDatabaseName().startsWith("local"))
        {
            root = new DefaultMutableTreeNode("base_root");
            try
            {
                ResultSet rs = mysql_connection.getConnection().getMetaData().getCatalogs();
                while (rs.next())
                {
                    Log.logd("TABLE_CAT = " + rs.getString("TABLE_CAT"));
                    DBShema dbs = new DBShema(rs.getString("TABLE_CAT"));
                    DefaultMutableTreeNode _DataBase = new DefaultMutableTreeNode(dbs);
                    root.add(_DataBase);
                    tnvshame.add(_DataBase);
                    vshame.add(rs.getString("TABLE_CAT"));
                }
                rs.close();
            } catch (Exception e)
            {
                Log.loge(e.getMessage());
            }
            databas = true;
        }
        //select for every database set of tables
        if (databas)
        {
            mysql_connection.disconnect();
            DefaultMutableTreeNode _DataBase = tnvshame.get(0);
            for (String s : vshame)
            {
                add_tables(tnvshame.get(vshame.indexOf(s)), s);

            }
            mysql_connection.connect();
        } else
        {
            DBShema dbs = new DBShema(mysql_connection.getDatabaseName());
            root = new DefaultMutableTreeNode(dbs);
            mysql_connection.disconnect();
            add_tables(root, null);
            mysql_connection.connect();
        }
        //select for all database and every 


        DefaultTreeModel treeModel = new DefaultTreeModel(root);
        jt_database_table_list.setModel(treeModel);
    }

    private void add_tables(DefaultMutableTreeNode root_table, String shema)
    {
        String url;
        if (shema != null)
        {
            int li = mysql_connection.getUrl().lastIndexOf("/");
            url = (li + 1 < mysql_connection.getUrl().length()) ? mysql_connection.getUrl() + "/" + shema : mysql_connection.getUrl() + shema;
        } else
        {
            url = mysql_connection.getUrl();
        }

        MySqlConnection lmysql_connection = new MySqlConnection(mysql_connection.getUsername(), mysql_connection.getPassword(), url);
        lmysql_connection.connect();

        Connection connection = lmysql_connection.getConnection();
        ResultSet tables;
        try
        {
            DatabaseMetaData m = connection.getMetaData();
            tables = m.getTables(null, null, "%", null);
            while (tables.next())
            {
                DBTable dbt = new DBTable(tables.getString(3));
                DefaultMutableTreeNode _DataBase = new DefaultMutableTreeNode(dbt);
                root_table.add(_DataBase);
            }

            tables.close();
            connection.close();
            lmysql_connection.disconnect();
        } catch (Exception ex)
        {
            // Log.loge( ex.getMessage());
            Log.loge(ex.getStackTrace()[0].toString());
        }


    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainGui().setVisible(true);
            }
        });
    }
    private DrawingPan dpan;
    private SqlExecution sql_exe;
    private static ImageIcon root_img = new ImageIcon("D:\\WORKARE\\SimpleMySql\\SimpleMySQL_v1\\src\\data\\database_mysql.png");
    private static ImageIcon leaf_img = new ImageIcon("D:\\WORKARE\\SimpleMySql\\SimpleMySQL_v1\\src\\data\\database_table.png");
    private MySqlConnection mysql_connection;
    private DefaultMutableTreeNode root;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jm_File;
    private javax.swing.JMenu jm_draw;
    private javax.swing.JMenu jm_edit;
    private javax.swing.JMenuBar jmb_menu;
    private javax.swing.JMenuItem jmi_close_conection;
    private javax.swing.JMenuItem jmi_connection;
    private javax.swing.JMenuItem jmi_delete_selected_table;
    private javax.swing.JMenuItem jmi_dizajn;
    private javax.swing.JMenuItem jmi_new_shema;
    private javax.swing.JMenuItem jmi_new_table;
    private javax.swing.JMenuItem jmi_otvori_konekciju;
    private javax.swing.JMenuItem jmi_select;
    private javax.swing.JMenuItem jmi_shema;
    private javax.swing.JMenuItem jmi_teble;
    private javax.swing.JPanel jp_holder;
    private javax.swing.JPanel jp_tree_holder;
    private javax.swing.JPopupMenu jpm_tree_menue;
    private javax.swing.JSplitPane jsp_split_panel;
    private javax.swing.JScrollPane jsp_tree_holder;
    private javax.swing.JTree jt_database_table_list;
    // End of variables declaration//GEN-END:variables
}
