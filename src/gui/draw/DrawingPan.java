/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.draw;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import log.Log;

/**
 *
 * @author Zoran Zivanovic <zoran86zz at yahoo.com>
 */
public class DrawingPan extends javax.swing.JPanel
{

    private DefaultMutableTreeNode root_tree;
    private JPanel jp_tree_holder;
    private ArrayList<Rectangle> cells;
    private ArrayList<DrawComponets> components;
    private DrawComponets dc_selected;
    private Point pres_point_dif;

    /**
     * Creates new form DrawingPan
     */
    public DrawingPan(DefaultMutableTreeNode root, JPanel jp_tree_holder)
    {
        initComponents();
        this.root_tree = root;
        this.jp_tree_holder = jp_tree_holder;
        cells = new ArrayList<>();
        components = new ArrayList<>();
        DrawComponets dc = new DCShema("###WWWSema1###");
        components.add(dc);
        dc = new DCShema("QQQSema2");
        components.add(dc);
        DCConector dcc = new DCConector();
        dcc.setStart(new Point(40, 40));
        dcc.setEnd(new Point(140, 140));
        components.add(dcc);
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        super.paintComponent(g);

        //draw grid
        //draw_grid(g);

        //draw components
        draw_components(g);
    }

    private void draw_components(Graphics g)
    {
        for (DrawComponets dc : components)
        {
            dc.draw_me(g);
        }

    }

    private void draw_grid(Graphics g)
    {
        Graphics2D g2d = (Graphics2D) g.create();

        int width = getWidth();

        int height = getHeight();

        int cellWidth = 20;
        int cellHeight = 20;

        int xOffset = (width - ((width / cellWidth) * cellWidth)) / 2;
        int yOffset = (height - ((height / cellHeight) * cellHeight)) / 2;
        //  if (cells.isEmpty())
        {
            for (int row = 0; row < (width / cellWidth); row++)
            {
                for (int col = 0; col < (height / cellHeight); col++)
                {
                    Rectangle cell = new Rectangle(
                            xOffset + (col * cellWidth),
                            yOffset + (row * cellHeight),
                            cellWidth,
                            cellHeight);
                    cells.add(cell);
                }
            }
        }

        g2d.setColor(Color.GRAY);
        for (Rectangle cell : cells)
        {
            g2d.draw(cell);
        }

        g2d.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                formMousePressed(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt)
            {
                formMouseMoved(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                formKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                formKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 366, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseMoved
    {//GEN-HEADEREND:event_formMouseMoved


        for (DrawComponets dc : components)
        {
            if (!(dc instanceof DCConector) && dc.isEnterd(evt.getPoint()))
            {
                setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                if(dc_selected!=null)
                    dc_selected.setSelected(false);
                
                dc_selected = dc;
                dc_selected.setSelected(true);
                break;
            } else
            {
                if (dc_selected instanceof DCConector)
                {
                    //do nothing 
                } else
                {
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                   // dc_selected = null;
                }
            }
        }


        repaint();
    }//GEN-LAST:event_formMouseMoved

    private void formMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseDragged
    {//GEN-HEADEREND:event_formMouseDragged
        //if (evt.getButton() == MouseEvent.BUTTON1)
        {
            if (dc_selected != null && pres_point_dif != null && dc_selected.isEnterd(evt.getPoint()))
            {
                Point p = evt.getPoint();
                p.x = p.x - pres_point_dif.x;
                p.y = p.y - pres_point_dif.y;

                dc_selected.update_position(p);
            }
        }
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMousePressed
    {//GEN-HEADEREND:event_formMousePressed
        if (evt.getButton() == MouseEvent.BUTTON1)
        {
            if (dc_selected != null)
            {
                if (dc_selected instanceof DCConector)
                {
                    if (((DCConector) dc_selected).getStart() == null)
                    {
                        //set start
                        ((DCConector) dc_selected).setStart(evt.getPoint());
                    }
                } else
                {
                    Point p = dc_selected.getPosition();
                    pres_point_dif = evt.getPoint();
                    pres_point_dif.x = pres_point_dif.x - p.x;
                    pres_point_dif.y = pres_point_dif.y - p.y;
                }
            }
        } else
        {
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseClicked
    {//GEN-HEADEREND:event_formMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1)
        {
            for (DrawComponets dc : components)
            {
                if (dc instanceof DCConector && ((DCConector) dc).isClicked(evt.getPoint()))
                {
                    ((DCConector) dc).togleSelected();
                    repaint();
                } else if (dc instanceof DCConector)
                {
                    ((DCConector) dc).setSelected(false);
                }
            }
        } else if (evt.getButton() == MouseEvent.BUTTON3)
        {
            dc_selected = null;
        }
    }//GEN-LAST:event_formMouseClicked

    private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
    {//GEN-HEADEREND:event_formMouseReleased
        if (evt.getButton() == MouseEvent.BUTTON1)
        {
            if (dc_selected != null && dc_selected instanceof DCConector)
            {
                ((DCConector) dc_selected).setEnd(evt.getPoint());
            }
        }
        repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_formKeyTyped
    {//GEN-HEADEREND:event_formKeyTyped
    }//GEN-LAST:event_formKeyTyped

    private void formKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_formKeyPressed
    {//GEN-HEADEREND:event_formKeyPressed
        if (evt.getExtendedKeyCode() == KeyEvent.VK_DELETE)
        {
            Object[] options =
            {
                "Da",
                "Ne"
            };
            int n = JOptionPane.showOptionDialog(this,
                    "Da li ste sigurni da zelite da obrisete komponentu?" + dc_selected.toString(),
                    "Potvrda",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[1]);
        }
    }//GEN-LAST:event_formKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void addConectionComponent(DCConector dcConector)
    {
        dc_selected = dcConector;
        components.add(dcConector);
    }
}
